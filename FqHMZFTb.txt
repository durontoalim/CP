


#include<bits/stdc++.h>
using namespace std;

using namespace std;


typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef double dl;
typedef complex<dl> cd;
typedef vector<cd> vcd;

#define endl '\n'
#define all(a) (a).begin(),(a).end()
#define sz(x) (int)x.size()


const double PI = acos(-1);
#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);

using cd = complex<double>;
void fft ( vector <cd> &a, bool invert )
{
    int n = sz ( a );

    for (int i = 1, j = 0; i < n; i++) {
        int bit = n >> 1;
        for (; j & bit; bit >>= 1)
            j ^= bit;
        j ^= bit;

        if (i < j)
            swap(a[i], a[j]);
    }


    for ( int len = 2; len <= n; len <<= 1 ) {

        double ang = ( ( 2.0 * PI ) / (dl)len ) * ( invert ? -1 : 1 );
        cd wlen ( cos ( ang ), sin ( ang ) );

        for ( int i = 0; i < n; i += len ) {

            cd  w(1);
            for ( int j = 0; j < ( len >> 1 ); j++ ) {

                cd u = a[i+j], v = w * a[i+j+(len>>1)];
                a[i+j] = u + v;

                a[i+j+(len>>1)] = u - v;
                w *= wlen;

            }

        }

    }

    if ( invert ) {
        for ( int i = 0; i < n; i++ ) {
            a[i] /= n;
        }
    }

}

vector<int> multiply(vector<int> const& a, vector<int> const& b) {
    vector<cd> fa(a.begin(), a.end()), fb(b.begin(), b.end());
    int n = 1;
    while (n < a.size() + b.size())
        n <<= 1;
    fa.resize(n);
    fb.resize(n);

    fft(fa, false);
    fft(fb, false);
    for (int i = 0; i < n; i++)
        fa[i] *= fb[i];
    fft(fa, true);

    vector<int> result(n);
    for (int i = 0; i < n; i++)
        result[i] = round(fa[i].real());
    return result;
}

const int mx = 5e5+123;
int ans[mx], n, m;
string s, p;

void solve ( char ch )
{
    vector < int > a, b, c;
    for ( auto u : s ) {
        a.push_back ( ( u == ch ) );
    }

    for ( auto u : p ) {
        b.push_back ( ( u == ch ) );
    }

    c = multiply( a, b );

    for ( int i = m-1; i < n; i++ ) {
        ans[i-m+1] += c[i];
    }

}

int main()
{
    optimize();

    cin >> s >> p;

    reverse( p.begin(), p.end() );

    n = s.size();
    m = p.size();

    solve ( 'A' );
    solve ( 'T' );
    solve ( 'G' );
    solve ( 'C' );

    int sol = INT_MAX;
    for ( int i = 0; i <= n-m; i++ ) {
        sol = min ( sol, m - ans[i] );
    }

    cout << sol << endl;


    return 0;
}