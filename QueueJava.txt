import java.util.LinkedList;
import java.util.Queue;

import static java.lang.System.out;

class B {
    public static void main(String[] args) {

            Queue< Integer > q = new LinkedList<>();

// add():
            q.add( 1 );
            q.add( 2 );
            q.add( 3 );
            // This method is used to add elements at the tail of queue


// remove():
            while ( !q.isEmpty() ) {
                out.println( q.remove() );
            }
            // This method removes and returns the head of the queue.
            // It throws NoSuchElementException when the queue is impty.

            q.add( 1 );
            q.add( 2 );
            q.add( 3 );


// poll():
            while ( !q.isEmpty()) {
                out.println ( q.poll() );
            }
            //  This method removes and returns the head of the queue.
            //  It returns null if the queue is empty.


// peek():
            out.println( q.peek() );
            // This method is used to view the head of queue without removing it.
            // It returns Null if the queue is empty.


// element():
            out.println( q.element() );
            // This method is similar to peek().
            // It throws NoSuchElementException when the queue is empty.


        }
}