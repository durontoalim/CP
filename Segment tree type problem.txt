
#include<bits/stdc++.h>
using namespace std;


const int mx = 1e6+123;
int tmx[mx*3], tmn[mx*3], a[mx];

void init ( int id, int b, int e )
{
    if ( b == e ) {
        tmx[id] = a[b];
        tmn[id] = a[b];
        return;
    }

    int mid = ( b + e ) >> 1;

    init ( id*2, b, mid );
    init ( id*2+1, mid+1, e );

    tmx[id] = max ( tmx[id*2], tmx[id*2+1] );
    tmn[id] = max ( tmn[id*2], tmn[id*2+1] );
}

int get_max_left( int id, int b, int e, int i, int j, int val )
{
    if(b > j || e < i) return -1;
    if( b >= i && e <= j ) {
        if(tmx[id] <= val) return -1;
        while(b != e) {
            int mid = ( b + e ) >> 1;
            if(tmx[id*2] > val) {
                id = id*2;
                e = mid;
            }

            else {
                id = id*2+1;
                b = mid+1;
            }
        }
        return b;
    }

    int mid = ( b + e ) >> 1;
    int ret = get_max_left( id*2, b, mid, i, j, val );
    if(ret != -1) return ret;
    return get_max_left( id*2+1, mid+1, e, i, j, val );
}


int get_max_right( int id, int b, int e, int i, int j, int val )
{
    if(b > j || e < i) return -1;
    if( b >= i && e <= j ) {
        if(tmx[id] <= val) return -1;
        while( b != e ) {
            int mid = ( b + e ) >> 1;
            if(tmx[id*2+1] > val) {
                id = id*2+1;
                b = mid+1;
            }

            else {
                id = id*2;
                e = mid;
            }
        }
        return b;
    }

    int mid = ( b + e ) >> 1;
    int ret = get_max_right( id*2+1, mid+1, e, i, j, val );
    if(ret != -1) return ret;
    return get_max_right( id*2, b, mid, i, j, val );
}

int get_min_left( int id, int b, int e, int i, int j, int val )
{
    if(b > j || e < i) return -1;
    if( b >= i && e <= j ) {
        if(tmn[id] >= val) return -1;
        while(b != e) {
            int mid = ( b + e ) >> 1;
            if(tmn[id*2] < val) {
                id = id*2;
                e = mid;
            }

            else {
                id = id*2+1;
                b = mid+1;
            }
        }
        return b;
    }

    int mid = ( b + e ) >> 1;
    int ret = get_min_left( id*2, b, mid, i, j, val );
    if(ret != -1) return ret;
    return get_min_left( id*2+1, mid+1, e, i, j, val );
}


int get_min_right( int id, int b, int e, int i, int j, int val )
{
    if(b > j || e < i) return -1;
    if( b >= i && e <= j ) {
        if(tmn[id] >= val) return -1;
        while( b != e ) {
            int mid = ( b + e ) >> 1;
            if(tmn[id*2+1] < val) {
                id = id*2+1;
                b = mid+1;
            }

            else {
                id = id*2;
                e = mid;
            }
        }
        return b;
    }

    int mid = ( b + e ) >> 1;
    int ret = get_min_right( id*2+1, mid+1, e, i, j, val );
    if(ret != -1) return ret;
    return get_min_right( id*2, b, mid, i, j, val );
}

int main()
{
    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);

    int n, q;
    cin >> n >> q;
    for ( int i = 1; i <= n; i++ ) cin >> a[i];

    init ( 1, 1, n );

    while ( q-- ) {
        int type, l, r, val;
        cin >> type >> l >> r >> val;

        /// Left most element which is greater than val in range (l, r).
        if ( type == 1 ) cout << get_max_left( 1, 1, n, l, r, val ) << endl;


        /// Right most element which is greater than val in range (l, r).
        if ( type == 2 ) cout << get_max_right( 1, 1, n, l, r, val ) << endl;


        /// Left most element which is smaller than val in range (l, r).
        if ( type == 3 ) cout << get_min_left( 1, 1, n, l, r, val ) << endl;


        /// Right most element which is smaller than val in range (l, r).
        if ( type == 4 ) cout << get_min_right( 1, 1, n, l, r, val ) << endl;
    }


    return 0;
}

/**

You can use below test case to test your code. 

7 4
6 7 1 3 2 4 5
1 2 5 1
2 2 5 1
3 2 5 8
4 2 5 8

**/