
/**
Push- Rebel :
Complexity : O(V^3)
**/

#include<bits/stdc++.h>
#define mem(a,b) memset(a, b, sizeof(a) )
#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
using namespace std;

const int mx = 1212;

struct Push_rebel{
    int n, s, t;
    const int inf = 2e9;
    vector<vector<int>> capacity;
    vector<vector<int>>  flow;
    int height[mx];
    int excess[mx];

    Push_rebel ( int n, int s, int t ): n(n), s(s), t(t),
    capacity(n+1, vector<int>(n+1, 0)), flow(n+1, vector<int>(n+1, 0)) {}

    void addEdge ( int u, int v, int cap ) {
        capacity[u][v] = cap;

        /** For undirected graph :

        capacity[u][v] = cap;
        capacity[v][u] = cap;

        **/
    }

    void push(int u, int v) {
        int d = min(excess[u], capacity[u][v] - flow[u][v]);
        flow[u][v] += d;
        flow[v][u] -= d;
        excess[u] -= d;
        excess[v] += d;
    }

    void relabel(int u) {
        int d = inf;
        for (int i = 1; i <= n; i++) {
            if (capacity[u][i] - flow[u][i] > 0)
                d = min(d, height[i]);
        }
        if (d < inf)
            height[u] = d + 1;
    }

    vector<int> find_max_height_vertices(int s, int t) {
        vector<int> max_height;
        for (int i = 1; i <= n; i++) {
            if (i != s && i != t && excess[i] > 0) {
                if (!max_height.empty() && height[i] > height[max_height[0]])
                    max_height.clear();
                if (max_height.empty() || height[i] == height[max_height[0]])
                    max_height.push_back(i);
            }
        }
        return max_height;
    }

    int maxflow() {
        mem ( height, 0 );
        height[s] = n;
      //  mem ( flow, 0 );
        mem ( excess, 0 );
        excess[s] = inf;

        for (int i = 1; i <= n; i++) {
            if (i != s)
                push(s, i);
        }

        vector<int> current;
        while (!(current = find_max_height_vertices(s, t)).empty()) {
            for (int i : current) {
                bool pushed = false;
                for (int j = 1; j <= n && excess[i]; j++) {
                    if (capacity[i][j] - flow[i][j] > 0 && height[i] == height[j] + 1) {
                        push(i, j);
                        pushed = true;
                    }
                }
                if (!pushed) {
                    relabel(i);
                    break;
                }
            }
        }

        int max_flow = 0;
        for (int i = 1; i <= n; i++)
            max_flow += flow[s][i];
        return max_flow;
    }
};

int main()
{
    optimize();

    int n, m, s, t;
    cin >> n >> m >> s >> t;

    Push_rebel push_rebel ( n, s, t );

    for ( int i = 1; i <= m; i++ ) {
        int u, v, w;
        cin >> u >> v >> w;
        push_rebel.addEdge( u, v, w );
    }

    cout << push_rebel.maxflow();

    return 0;
}