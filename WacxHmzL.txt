//In the name of ALLAH

import com.sun.rmi.rmid.ExecOptionPermission;

import java.io.OutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.Random;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;
import java.io.BufferedReader;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */

class B {
    public static void main(String[] args) throws Exception {

        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        TaskF solver = new TaskF();
        solver.solve(1, in, out);
        out.close();

    }

    static class TaskF {

        public void solve(int testNumber, InputReader in, PrintWriter out) {
            
            byte b = Byte.MAX_VALUE;
            b = Byte.MIN_VALUE;
            // same short, int, long
            
            BigInteger.valueOf( b );
            // same short, int, long
			String s = "";

			while ( in.tokenizer.hasMoreTokens() ) {
    		s += in.next();
		} // for taking string with space


		Character.toLowerCase('a');
		Character.toUpperCase( 'a' );
		Character.isUpperCase( 'a' );
		Character.isLowerCase( 'a' );
		Character.isWhitespace( 'a' );

		Character.digit( s.charAt(i), Base ); // gets the int value of char in given base

        }
    }

    static class InputReader {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        public boolean hasNext() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    String line = reader.readLine();
                    if (line == null) {
                        return false;
                    }
                    tokenizer = new StringTokenizer(line);
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return true;
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }


    }
}