

#include<bits/stdc++.h>
using namespace std;


typedef long long ll;

#define endl '\n'
#define MOD 100019
#define mem(a,b) memset(a, b, sizeof(a) )
#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);

const int mx = 5e3+123;
int x[mx], y[mx], n, A[mx], B[mx], C[mx];
ll pre[200123], inv[200123];
bool vis[200123];

inline void normal(ll &a) { a %= MOD; (a < 0) && (a += MOD); }
inline ll modMul(ll a, ll b) { a %= MOD, b %= MOD; normal(a), normal(b); return (a*b)%MOD; }
inline ll modAdd(ll a, ll b) { a %= MOD, b %= MOD; normal(a), normal(b); return (a+b)%MOD; }
inline ll modSub(ll a, ll b) { a %= MOD, b %= MOD; normal(a), normal(b); a -= b; normal(a); return a; }
inline ll modPow(ll b, ll p) { ll r = 1; while(p) { if(p&1) r = modMul(r, b); b = modMul(b, b); p >>= 1; } return r; }
inline ll modInverse(ll a) { return modPow(a, MOD-2); }
inline ll modDiv(ll a, ll b) { return modMul(a, modInverse(b)); }


int main()
{
    optimize();
    int m = MOD;

    inv[1] = 1;
    for(int i = 2; i < m; ++i)
        inv[i] = modInverse( i );

    int t;
    cin >> t;
    for ( int tc = 1; tc <= t; tc++ ) {
        mem ( vis, 0 );
        cin >> n;
        for ( int i = 0; i < n; i++ ) {
            cin >> x[i] >> y[i];
            vis[x[i]] = 1;
            pre[x[i]] = y[i];
            normal( pre[x[i]] );
        }

        for ( int i = 0; i < n; i++ ) {
            C[i] = 1;
            for ( int j = 0; j < n; j++ ) {
                if ( i != j ) {
                    C[i] = modMul( C[i], x[i] - x[j] );
                }
            }
        }

        int q;
        cin >> q;

        cout << "Case " << tc << ":\n";
        while ( q-- ) {
            int X, ans = 0, no = 0;
            cin >> X;
            if ( vis[X] ) {
                cout << pre[X] << endl;
                continue;
            }

            int A = 1;
            for ( int i = 0; i < n; i++ ) A = modMul( A, X - x[i] );

            int B = 0;
            for ( int i = 0; i < n; i++ ) {
                B = modAdd( B, modMul( y[i], inv[modMul( X - x[i] , C[i] )] ) );
            }

            ans = modMul( A, B );

            cout << ans << endl;
        }
    }

    return 0;
}