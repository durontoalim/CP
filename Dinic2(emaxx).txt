/**

Dinic algorithm emaxx style.
Complexity : O(V^2 * E )
For unit network : O (E*sqrt(V) )
**/


#include<bits/stdc++.h>
#define mem(a,b) memset(a, b, sizeof(a) )
#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
using namespace std;

const int mx = 1212;

struct Dinic {


    struct FlowEdge {
        int v, u;
        long long cap, flow = 0;
        FlowEdge(int v, int u, long long cap) : v(v), u(u), cap(cap) {}
    };

    const long long flow_inf = 1e18;
    vector<FlowEdge> edges;
    vector<int> adj[mx];
    int n, m = 0;
    int s, t;
    int level[mx], ptr[mx];
    queue<int> q;

    Dinic(int n, int s, int t) : n(n), s(s), t(t) {}

    void addEdge(int v, int u, long long cap) {
        edges.emplace_back(v, u, cap);
        edges.emplace_back(u, v, 0);

        /** For undirected Graph:

        edges.emplace_back(v, u, cap);
        edges.emplace_back(u, v, cap);

        **/
        adj[v].push_back(m);
        adj[u].push_back(m + 1);
        m += 2;
    }

    bool bfs() {
        while (!q.empty()) {
            int v = q.front();
            q.pop();
            for (int id : adj[v]) {
                if (edges[id].cap - edges[id].flow < 1)
                    continue;
                if (level[edges[id].u] != -1)
                    continue;
                level[edges[id].u] = level[v] + 1;
                q.push(edges[id].u);
            }
        }
        return level[t] != -1;
    }

    long long dfs(int v, long long pushed) {
        if (pushed == 0)
            return 0;
        if (v == t)
            return pushed;
        for (int& cid = ptr[v]; cid < (int)adj[v].size(); cid++) {
            int id = adj[v][cid];
            int u = edges[id].u;
            if (level[v] + 1 != level[u] || edges[id].cap - edges[id].flow < 1)
                continue;
            long long tr = dfs(u, min(pushed, edges[id].cap - edges[id].flow));
            if (tr == 0)
                continue;
            edges[id].flow += tr;
            edges[id ^ 1].flow -= tr;
            return tr;
        }
        return 0;
    }

    long long maxflow() {
        long long f = 0;
        while (true) {
            mem ( level, -1 );
            level[s] = 0;
            q.push(s);
            if (!bfs())
                break;
            mem ( ptr, 0 );
            while (long long pushed = dfs(s, flow_inf)) {
                f += pushed;
            }
        }
        return f;
    }
};



int main()
{
    optimize();
    int n, m, s, t;
    cin >> n >> m >> s >> t;

    Dinic dinic ( n, s, t );

    for ( int i = 1; i <= m; i++ ) {
        int u, v, w;
        cin >> u >> v >> w;
        dinic.addEdge( u, v, w );
    }

    cout << dinic.maxflow() << endl;



    return 0;
}