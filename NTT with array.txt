
int getK ( int m )
{
    for ( int i = 30; i >= 0; i-- ) {
        if ( (m-1) % ( 1 << i ) == 0 ) return i;
    }
}

int generator (int p) {
    vector<int> fact;
    int phi = p-1,  n = phi;
    for (int i=2; i*i<=n; ++i)
        if (n % i == 0) {
            fact.push_back (i);
            while (n % i == 0)
                n /= i;
        }
    if (n > 1)
        fact.push_back (n);

    for (int res=2; res<=p; ++res) {
        bool ok = true;
        for (size_t i=0; i<fact.size() && ok; ++i)
            ok &= (int)modPow( res, phi / fact[i]) != 1;
        if (ok)  return res;
    }
    return -1;
}

const int mod = MOD;
const int K = getK ( mod );
const int root = modPow( generator( mod ), ( mod-1 ) / ( 1 << K ) );
const int root_1 = modInverse( root );
const int root_pw = 1 << K;


void fft(int *a, int n, bool invert) {

    for (int i = 1, j = 0; i < n; i++) {
        int bit = n >> 1;
        for (; j & bit; bit >>= 1)
            j ^= bit;
        j ^= bit;

        if (i < j)
            swap(a[i], a[j]);
    }

    for (int len = 2; len <= n; len <<= 1) {
        int wlen = invert ? root_1 : root;
        for (int i = len; i < root_pw; i <<= 1)
            wlen = (int)(1LL * wlen * wlen % mod);

        for (int i = 0; i < n; i += len) {
            int w = 1;
            for (int j = 0; j < len / 2; j++) {
                int u = a[i+j], v = (int)(1LL * a[i+j+len/2] * w % mod);
                a[i+j] = u + v < mod ? u + v : u + v - mod;
                a[i+j+len/2] = u - v >= 0 ? u - v : u - v + mod;
                w = (int)(1LL * w * wlen % mod);
            }
        }
    }

    if (invert) {
        int n_1 = modInverse(n);
        for (int i = 0; i < n; i++)
            a[i] = (int)(1LL * a[i] * n_1 % mod);
    }
}

void multiply( int *fa, int *fb, int *result, int a, int b ) {
    int n = 1;
    while (n < a + b)
        n <<= 1;


    fft(fa, n, false);
    fft(fb, n, false);
    for (int i = 0; i < n; i++)
        fa[i] = modMul( fa[i], fb[i] );
    fft(fa, n, true);

    for (int i = 0; i < n; i++) {
        result[i] = fa[i];
    }
}

const int mx = 1e5+123;
int a[mx*2], b[mx*2], res[mx*2]; /// Arrays at least 2 times larger than input size.

int main()
{
    /// Do this before making polynomial
    mem ( res, 0 );
    mem ( a, 0 );
    mem ( b, 0 );

    for ( int i = 0; i <= n; i++ ) a[i] = i;
    for ( int i = 0; i <= n; i++ ) b[i] = i;

    multiply( a, b, res, n+1, n+1 );


    return 0;
}