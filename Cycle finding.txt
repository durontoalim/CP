
/// Cycle finding in a undirected graph

const int mx = 1e5+123;

vi adj[mx];
int color[mx];
int parent[mx];
int cycle_start, cycle_end;

bool dfs(int v, int p) {
    color[v] = 1;
    for (int u : adj[v]) {
        if (color[u] == 0 ) {
            parent[u] = v;
            if (dfs(u, v))
                return true;
        } else if ( u != p && color[u] == 1) { /// For directed graph just remove u != p
            cycle_end = v;
            cycle_start = u;
            return true;
        }
    }
    color[v] = 2;
    return false;
}

int find_cycle( int n )
{
    for ( int i = 0; i <= n; i++ ) {
        parent[i] = -1;
        color[i] = 0;
    }
    cycle_start = -1;

    for (int v = 1; v <= n; v++) {
        if (color[v] == 0 && dfs(v, 0))
            break;
    }

    vector<int> cycle;
    cycle.push_back(cycle_start);
    for (int v = cycle_end; v != cycle_start; v = parent[v])
        cycle.push_back(v);
    cycle.push_back(cycle_start);
    reverse(cycle.begin(), cycle.end());


    return sz ( cycle ) - 1;
}

int main()
{
    optimize();

    int n; /// Number of nodes
    find_cycle( n );

    return 0;
}